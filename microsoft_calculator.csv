"Fix crash with MathRichEditBox on x86","![image](https://user-images.githubusercontent.com/1226538/70317279-4ec00700-17d2-11ea-810d-29e58e8f148a.png)x86 uses the wrong calling convention when calling SetMath, GetMath, SetMathMode, making the application crash when it tries to clean the stack (already cleaned by the function).### Description of the changes:- Add `__stdcall` to functions from `ITextDocument4` to force the calling convention.Note: other modifications aren't necessary but it makes the code a little closer to the SDK.### How changes were validated:- manually","open","853","null","[object Object]","null"
"Update GraphingCalculator Mock and Nuget to allow official builds","## Fixes part of #338 .### Description of the changes:- Updated the MockGraphingImpl project to be called GraphingImpl- Updated the nuget.config to include the WindowsApps Microsoft feed-### How changes were validated:<!--Review https://github.com/Microsoft/calculator/blob/master/CONTRIBUTING.md and ensure all contributing requirements are met.Specify how you tested your changes (i.e. manual/ad-hoc testing, automated testing, new automated tests added)-->- Tested manually","open","852","mcooley","[object Object]","null"
"Inconsistent operand order for logarithm to base x","- Behavior of logarithm to base xThe first operand entered (or previous result) is the base, the second operator is the anti-logarithm (i.e. the number of which the logarithm is calculated).e.g.: '16   base log   2" yields 0.25 instead of the expected value 4.- Behavior of similar operatorsFor exponentiation (x<sup>y</sup>) the first operand is the base and the second operand is the exponent.For the n-th root (x<sup>1/y</sup>) the first operand is the radicand and the second operand is the index.The behavior of the logarithm (log<sub>x</sub>(y)) is inconsistent to similar binary operators and also to the GUI, which shows log<sub>y</sub>(x). Furthermore this behavior does not allow to take the logarithm to base x of a previous result.","open","851","null","[object Object]","null"
"Refactoring LocalizationSettings","## Fixes #849.### Description of the changes:- Provided public constructor taking a DecimalFormatter for unit testing specific locales.- Changed m_resolvedName to be a Platform::String ^ so it doesn't need to create a new one each time.- Used algorithms over raw loops.- Return strings of a single character created by constructor instead of constructor and push_back call.### How changes were validated:- Added unit tests for much of LocalizatonSettings.","open","850","rudyhuyn","","null"
"LocalizationSettings.h could use code clean up and unit tests","- LocalizationSettings.h doesn't currently have unit tests.- There are many instances where an algorithm such as find or copy can be used instead of manual implementations.- m_resolvedName can be changed to be a Platform::String to prevent the need to create a new one each time GetLocaleName is called.- GetDecimalSeparatorStr and GetNumberGroupingSeparatorStr could be made more efficient by using the constructor taking a wchar_t instead of default constructing a string and pushing back a character.","open","849","null","[object Object]","null"
"Hide or Disable graphing calculator menu item when necessary","Hide the graphing calculator menu item when the OS doesn't support the feature or disable it when a group policy is set.## Description of the changes:- Hide the Graphing Calculator menu when running Windows versions prior to Vibranium- Disable the Graphing Calculator menu when a group policy is set - Switch to the default view (Standard mode) when Graphing Calculator was the last used feature but the feature was disable later by the group policy- modify accelerator keys of Programmer mode and Date Calculation if the Graphing Calculator menu item is visible or not (`3 and 4` or `4 and 5`)Also:- simplify `NavCategory` class- remove NavCategory::Position (never used)### How changes were validated:- manually","open","848","EriWong","[object Object]","null"
"Add Graph Settings","Adds a settings button which controls a flyout panel allowing the user to control the graph extents and the trig unit mode.### Description of the changes:New control--### How changes were validated:<!--Review https://github.com/Microsoft/calculator/blob/master/CONTRIBUTING.md and ensure all contributing requirements are met.Specify how you tested your changes (i.e. manual/ad-hoc testing, automated testing, new automated tests added)-->Manual, build debug/release.","open","847","null","[object Object]","null"
"Remove adjustment from local time","## Fixes #792.### Description of the changes:It looks like the CalendarDatePicker control now provides a UTC Date as the value, making it so the conditions in #557 do not apply anymore. The conversion from local time actually pushes the date forward a day. Changes due to #557 are reverted here.### How changes were validated:<!--Review https://github.com/Microsoft/calculator/blob/master/CONTRIBUTING.md and ensure all contributing requirements are met.Specify how you tested your changes (i.e. manual/ad-hoc testing, automated testing, new automated tests added)-->Tested Manually","open","834","rudyhuyn","[object Object],[object Object]","null"
"Remove EquationTextBox from KeyGraphFeaturesPanel","### Description of the changes:- Replace the templatized EquationTextBox in KeyGraphFeaturesPanel with a MathTextBoxAlso:- Give focus to the back button when the user opens the panel- move styles only used by Graph Calculator from App.xaml.cs to EquationInputArea/GraphingCalculator to improve startup time- NIT: make the names of events used by the EquationInputArea control uniform.- simplify KeyGraphFeaturesPanel- simplify the XAML code of the toggle button used in EquationTextBox### How changes were validated:- manually","open","833","joseartrivera","[object Object],[object Object]","null"
"GraphControl: refactoring and optimizations","### Description of the changes:Full refactoring of `Equation` to use only normal properties instead of dependency propertiesRefactor GraphingControl- The EquationViewModel used for KeyGraphFeatures is now hosted by `GraphingCalculatorViewModel` instead of `GraphControl`Refactor VariableViewModel to not use PropertyChanged as an internal event  - modify Min and Max even when Value is modified using the property  - remove OBSERVABLE_OBJECT_CALLBACK(OnPropertyChanged)  - replace the property `Value` and the method `SetValue`  - replace OBSERVABLE_PROPERTY_RW_ALWAYS_NOTIFY by OBSERVABLE_PROPERTY_RW  - extract `VariableViewModel` from `GraphingCalculatorViewModel.cpp`Also- use a `Color` instead of a `SolidColorBrush` for LineColor allowing us to remove the workaround using a blankBrush in `EquationInputArea`        equationViewModel->LineColor = AvailableColors->GetAt(m_lastLineColorIndex);- extract `KeyGraphFeatures` from `Equation`- made many properties read-only- rename `EquationInputAreaControl.EquationVM` as `EquationInputAreaControl.SelectedEquation`- replace `GraphControl::PropertyChangedEventHandler` by the standard `PropertyChangedEventHandler`### How changes were validated:- manually","open","831","joseartrivera","[object Object]","null"
"High contrast","Set the colors for the elements of Graphing Calculator in high contrast mode.","open","832","rudyhuyn","[object Object]","null"
"[Graph] Replace the Add button by a EquationTextBlock","## Description of the changes:- Replace the Add button by a 'ghost" EquationTextBlock- Automatically create a new equation when     - the user presses Enter when the last EquationTextBox is focused    - the last EquationTextBox loses the focus and the value has been modified- Give the focus to the next equation when users press enterAlso- Make sure the background of the `RichEditBox` is aligned with the Function Button- Prevent the user to remove the `fake` `EquationTextBlock` ### How changes were validated:- Manually with all themes and high contrast","open","826","joseartrivera","[object Object]","null"
"Fix prefix 0s after deleting decimal point","## Fixes #817 .### Description of the changes:- Added a verification if the remaining data is 0 only, and then pop this 0 out.- 2 Tests corresponding### How changes were validated:<!--Review https://github.com/Microsoft/calculator/blob/master/CONTRIBUTING.md and ensure all contributing requirements are met.Specify how you tested your changes (i.e. manual/ad-hoc testing, automated testing, new automated tests added)-->- Added an `UITest` and an `UnitTest`Additional note: My respond may delay because I can't use git(hub) on weekdays.","open","825","rudyhuyn","[object Object],[object Object]","null"
"Standard and Scientific modes allow multiple zeros to be prefixed","<!--Before filing a bug- Ensure the bug reproduces on the latest version of the app.- Search existing issues and make sure this issue is not already filed.-->**Describe the bug**<!-- A clear and concise description of what the bug is. -->When using the standard or scientific mode, the calculator allows multiple zeros to be prefixed inside the input field.While it doesn't change the calculation results, this is weird behavior.**Steps To Reproduce**1. Enable 'Standard' or 'Scientific' mode.2. Click the decimal point '.'3. Press the backspace key to remove the decimal point.4. Press the zero key multiple times. Other digits can be pressed too.5. See error.**Expected behavior**<!-- A clear and concise description of what you expected to happen. -->After removing the decimal point (step 3 above), the initial zero should be replaced with the first non-zero digit typed.**Screenshots**<!-- If applicable, add screenshots to help explain your problem. -->![image](https://user-images.githubusercontent.com/12100397/69373210-0110ae00-0cac-11ea-99f9-5657c41355c5.png)![image](https://user-images.githubusercontent.com/12100397/69373271-200f4000-0cac-11ea-95f6-ef33d70d0d6b.png)**Device and Application Information** - OS Build: 10.0.18362.0 - Architecture: x64 - Application Version: 10.1908.0.0 - Region: en-US - Dev Version Installed: False<!--Run the following commands in Powershell and copy/paste the output.' - OS Build: $([Environment]::OSVersion.Version)"" - Architecture: $((Get-AppxPackage -Name Microsoft.WindowsCalculator).Architecture)"" - Application Version: $((Get-AppxPackage -Name Microsoft.WindowsCalculator).Version)"" - Region: $((Get-Culture).Name)"" - Dev Version Installed: $($null -ne (Get-AppxPackage -Name Microsoft.WindowsCalculator.Dev))"-->**Additional context**<!-- Add any other context about the problem here. -->N/A**Requested Assignment**<!--Some people just want to report a bug and let someone else fix it.Other people want to not only submit the bug report, but fix it as well.Both scenarios are completely ok. We just want to know which one it is.Please indicate which bucket you fall into by keeping one and removing the other.-->I'm just reporting this problem.  I don't want to fix it.","open","817","null","[object Object],[object Object],[object Object],[object Object],[object Object]","null"
"Support basic interest rate calculations","I was really surprised that there is no support for basic financial formulas in standard Windows calculator. I tried to look for any relevant Github issues but couldn't find any.**Proposal**Create a basic 'compound interest rate calculator" with or without payments.**Goals**In a basic case, allow the user to compute one of principal/interest rate/term/total given the other three values.**Requested Assignment**I would like to help implementing this feature.If there is an interest in this, I can create a normal spec with wireframes.","open","806","null","[object Object],[object Object]","null"
"In Programmer calculator pane, text is not getting resized for "Hex,Dec,OCT,Bin" value text","In Programmer calculator pane, text is not getting resized for 'Hex,Dec,OCT,Bin" value text**Repro steps**1.Launch the calculator application from start menu.2.Navigate to  menu navigation button present in left corner if the app and invoke it.3.Now select the Programmer calculator  and invoke it.4.Give some input value and observed the resulted Hex,Dec,OCT,Bin value text  size in Textscaling 200%. mode.**Actual Results**In programmer calculator pane "Hex, Dec, OCT, Bin value text size is  not enlarged after applying 200 % textscaling.**Expected Results**Text size should be increased when Text scaling is applied**User Impact**Users with low vision will face difficulty if the text is not getting increased.![image](https://user-images.githubusercontent.com/1414423/68886736-991b0000-06cc-11ea-9f94-9ead3fd75dbc.png)","open","801","null","[object Object],[object Object],[object Object],[object Object]","null"
"When text scaling is applied, text is not getting resized in Length Converter pane","When text scaling is applied, text is not getting resized in Length Converter pane**Repro steps:**1.Launch the calculator application from start menu.2.Navigate to  menu navigation button present in left corner if the app and invoke it.3.Now select the length option under Converter pane and invoke it.4.Length Converter page, select “kilometers” as the unit type in the input field and input “5”  and navigate to the Output values now observe the 'about equals to values" text size in Textscaling 200%. mode.**Actual Results**In Length converter pane "About equals text" and "Displayed value" text is not enlarged after applying 200 % textscaling.**Expected Results**Text size should be increased when Text scaling is applied**User Impact**Users with low vision will face difficulty if the text is not getting increased.![image](https://user-images.githubusercontent.com/1414423/68886642-70930600-06cc-11ea-9065-69f9c5f384f6.png)","open","800","null","[object Object],[object Object],[object Object],[object Object]","null"
"Date Calculator showing wrong result in some instances when only one field is changed","The calculator app shows difference between yesterday and today as same1. Open calculator and change to date calculation.2. By default, From and To are populated to Today's date.3. Change From to yesterday.You will notice that the date difference is still 'Same dates" which is incorrect. See screenshot. It looks like the bug repros when you change only one of the fields - either From or To. When both are changed, it appears to be working correctly.![image](https://user-images.githubusercontent.com/1414423/68886524-3cb7e080-06cc-11ea-8e0e-4274997e1088.png)","open","792","null","[object Object],[object Object],[object Object],[object Object]","null"
"Missing Frame.NavigationFailed event","I was trying to use your activation code as a way to check that I'm handling multi-view activation correctly in my own app. I notice that you check the return value of Frame.Navigate and throw if false. However, according to the docs - https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.frame.navigate#Windows_UI_Xaml_Controls_Frame_Navigate_Windows_UI_Xaml_Interop_TypeName_System_Object_ - this method always returns true unless you add a NavigationFailed handler and set Handled to true, and you don't seem to have added a NavigationFailed handler. So my question is, am I misinterpreting the docs, are the docs wrong, or did you forget to add the handler? Also, is it actually possible for the navigation to fail? Do you know of any way to force it to fail in such as way that NavigationFailed is invoked (without simply throwing an unhandled exception) in order to test it?","open","789","rudyhuyn","[object Object]","null"
"Update Standard Mode Calculator UI Tests","### Description of the changes:- I'm working on updating standard calculator test with the end goal to have most repeated manual tests automated### Description test coverage:Standard- Manual Test Case 23624583: BVT: All: Verify Calculator launches    - (Other than launch through command) **Not Automated**        - May looking into various launch scenarios. Currently, all test validates the application launch via command- Manual Test Case 23624584: BVT: All: Verify mouse input    - The automated tests (that replace this manual test case) verify clicking each of the buttons in the Calculator UI and getting an expected result. Via mouse input, all basic UI functionality is checked.    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: Basic UI Functionality via Mouse input        - public void MouseInput_AddSubtractClearClearEntryTwoThree()        - public void MouseInput_MultiplyDivideEqualFourFiveSix()        - public void MouseInput_InvertSquaredSevenEightNine()        - public void MouseInput_PercentSquareRootBackspaceDecimalNegateAddOneZero()        - public void MouseInput_HistoryButtons()        - public void MouseInput_MemoryButtons()- Manual Test Case 23624587: BVT: All: Verify memory functions    - These automated tests (that replace this manual test case) verify using memory related buttons in the Memory Panel, and in the memory flyout. Memory control buttons are verified at the end of automated tested in MouseInput_MemoryButtons()    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: Standard Memory        - public void StandardMemory_Panel()        - public void StandardMemory_Flyout()- Manual Test Case 23487108: BVT: All: Verify localized UI scaling    - **Not Automated**- Manual Test Case 23466694: BVT: All: Verify hotkeys common to all modes    - These automated tests (that replace this manual test case) verify the functionality of all hotkeys, that are common for all calculator modes, as well as the all keyboard input used in standard mode on the Standard Calculator.  Via keyboard input, all basic UI functionality is checked.        - To-do: Active issue 'Bug 23811901: Clicking on the History Label causes the [Shift] + [Ctrl] + [D] hotkeys to break" causes KeyboardInput_HistoryHotkeys() to fail.  It is currently commented out until the active bug is fixed.    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: Basic Calculator Functionality via keyboard input        - public void KeyboardInput_HotkeysToChangeToBasicModes()        - public void KeyboardInput_AddSubtractClearClearEntryTwoThree()        - public void KeyboardInput_MultiplyDivideEqualFourFiveSix()        - public void KeyboardInput_InvertSquaredSevenEightNine()        - public void KeyboardInput_PercentSquareRootBackspaceDecimalNegateAddOneZero()        - public void KeyboardInput_HistoryHotkeys()            - Currently commented out until the Bug 23811901 is fixed        - public void KeyboardInput_MemoryHotkeys()- Manual Test Case 23486687: BVT: All: Verify calculator localizes when changing system language settings    - **Not Automated**- Manual Test Case 23480026: BVT: Standard/Scientific: Verify history panel AND manual Test Case 23466739: BVT: Standard/Scientific: Verify history flyout    - These automated tests (that replace these manual test cases) verify using history related button/keyboard actions in the History Panel, and in the History flyout. The History button is verified in the automated test MouseInput_HistoryButtons().        - To-Do: Currently, an empty history panel on initial launch cannot be verified.  The automation cannot see the Windows element "HistoryEmpty."  This should be automated once the issue is resolved.    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: Standard History        - public void StandardHistory_Panel()        - public void StandardHistory_Flyout()- Manual Test Case 17416430: BVT: Standard: Verify arithmetic operators    - These automated test (that replace this manual test case) not only verify each operator individually, but they also simultaneously, verify mixed user input.        - Most Arithmetic Operators for standard calculator are also automated in:             - Region: Basic UI Functionality via Mouse input            - Region: Basic Calculator Functionality via Keyboard input    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: Arithmetic Operators Functionality via mixed input        - public void MixedInput_Operators_Addition()        - public void MixedInput_Operators_Subtraction()        - public void MixedInput_Operators_Multiplication()        - public void MixedInput_Operators_Division()        - public void MixedInput_Operators_Reciprocal()        - public void MixedInput_Operators_Square()        - public void MixedInput_Operators_SquareRoot()        - public void MixedInput_Operators_PercentAdditionSubtraction()        - public void MixedInput_Operators_PercentMultiplicationDivision()        - public void MixedInput_Operators_PositiveNegative()        - public void MixedInput_Operators_Decimal()        - public void MixedInput_Operators_Equal()        - public void MixedInput_Operators_Delete()        - public void MixedInput_Operators_ClearEntryClear()- Manual Test Case 23459163: BVT: KOT: Verify KOT button is only available in Standard mode    - This automated test (that replace this manual test case) verifies that Standard calculator has AoT button, but other major calculator modes do not    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_ButtonOnlyInStandard()- Manual Test Case 23459118: BVT: KOT: Verify error message display    - This automated test (that replace this manual test case) verifies error messaging while AoT mode        - To-do: Need to verify "All operator buttons (except for "CE", "C", "Delete" and "="), and memory buttons are disabled" when in AoT mode    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_ErrorMessage()- Manual Test Case 23458956: BVT: KOT: Verify scale retention    - This automated test (that replace this manual test case) verifies the window scale retention is maintained when switching between AoT and Non-AoT        - To-Do: Verify scale retention across calculator session    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_ButtonOnlyInStandard()- Manual Test Case 23458739: BVT: KOT: Verify app positioning after entering and exiting KOT mode    - **To-Do: Automate this test case**- Manual Test Case 23458498: BVT: KOT: Verify Memory function is not accessible while in KOT mode    - This automated test (that replace this manual test case) verifies memory function cannot be triggered in AoT calculator    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_NoMemoryFunction()- Manual Test Case 23458436: BVT: KOT: Verify History is not accessible while in KOT mode, but it is still tracked    - This automated test (that replace this manual test case) verifies the history flyout cannot be opened in AoT mode and that history is tracked while in AoT mode and available upon exit of AoT mode    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_HistoryFunction()- Manual Test Case 23456961: BVT: KOT: Verify entering and exiting KOT mode    - This automated test (that replace this manual test case) verifies the calculator can enter AoT mode, the AoT window is within a range of size, and it verifies exiting AoT mode.      - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_EnterExitKeepOnTop()- Manual Test Case 23456757: BVT: KOT: Verify UI while scaling    - This automated test verifies that the app can scale to smallest size, largest size, and to a medium size without crashing.  It does not test the visual appears of the UI while scaling.     - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_Scaling()- Manual Test Case 23456329: BVT: KOT: Verify tooltip    - This automated test (that replace this manual test case) verifies AoT button tooltips (in English)    - Location of Automated tests: CalculatorUITests > StandardModeFunctionalTests > Region: AoT (Always on top) Tests        - public void AoT_Tooltip()- Other Automated Test Cases, which do not have corresponding manual test cases in Azure    - Region: Error Tests        - public void Error_DivideByZero()        - public void Error_CubedNegativeNumber()    - Region: Stress Testing        - public void Stress_SwitchBetweenStandardAndOtherTypes()### How changes were validated:- I ran the tests","open","788","sanderl","[object Object]","null"
"refactor HistoryTest.cpp to test the history using HistoryViewModel","## Fixes #783 ### Description of the changes:- Modify HistoryTest.cpp to use `HistoryViewModel` instead of `CalculatorHistory`. in order to test the full stack and not only the CalcManager part.   - ⚠ one of the big difference is how the history items collection is ordered.Also:- Expose some methods from CalcManager (a native library) via StandardCalcViewModel, making them accessible from another windows runtime library.- make PropertyNames public instead of internal so other (dynamic) libraries can use them.- move `Utils::GetStringValue` from CalcViewModel to CalculatorUnitTests### How changes were validated:- Manually","open","784","sanderl","[object Object],[object Object],[object Object],[object Object]","null"
"Refactor HistoryTest.cpp to use HistoryViewModel (from CalcViewModel) instead of CalculatorHistory (from CalcManager)","**Describe the bug**All our unit tests related to the History function use `CalculatorHistory` while we should use HistoryViewModel to also detect bugs and regressions in our view models (some difference between the 2, the order is different for example). This modification will bring our unit tests closer to how we actually manage the history in the Calculator project.**Requested Assignment**If possible, I would like to fix this.","open","783","null","[object Object],[object Object]","null"
"Scientifictests","## Fixes #74 Long Term Testing Needs.(none)### Description of the changes:- Added basic functional tests for Scientific mode to be run with every test pass### How changes were validated:- I ran all tests consecutively in many different orders to ensure they always pass","open","779","sanderl","[object Object],[object Object]","null"
"CalcViewModel code cleaning","## Fixes #753### Description of the changes:- move KeyboardShortcutManager, ValidationConverter and ViewState to Calculator- remove dead code listed in #753 - remove Microsoft.UI.Xaml nuget package from CalcViewModel### How changes were validated:- manually","open","754","EriWong","[object Object],[object Object]","null"
"CalcViewModel contains classes related to UI + dead codes.","**Describe the bug**CalcViewModel contains many classes related to the UI that should be moved to the Calculator project.- KeyboardShortcutManager- ValidationConverter- ViewStateAnd some dead codes:- BindingBase- UnitConverterViewModel::StartConversionResultTimer- StandardCalculatorViewModel::ConvertIntegerToNumbersAndOperatorsEnum- StandardCalculatorViewModel::OnPinUnpinCommand- StandardCalculatorViewModel::SetViewPinnedState- StandardCalculatorViewModel::KeyPressed- StandardCalculatorViewModel::GetSelectedTokenTypeIn addition, CalcViewModel imports the NuGet Microsoft.UI.Xaml package that won't be required once the above methods/classes are removed.**Requested Assignment**If possible, I would like to fix this.","open","753","null","[object Object],[object Object]","null"
"Taking into account Windows settings to disable/enable animations","## Fixes #747 The Calculator caches the value of the setting 'Show animations in Windows" and never checks it again during the lifetime of the instance. This PR modifies this behavior.### Description of the changes:- remove all cached values of UISettings::AnimationsEnabled and check the value before playing a Storyboard.### How changes were validated:- manually","open","748","mcooley","[object Object],[object Object]","null"
"The calculator should react to changes in user settings to the enable/disable animations","**Describe the bug**The Calculator caches the value of the setting 'Show animations in Windows" and never checks it again during the lifetime of the instance.**Steps To Reproduce**- step 1: Launch the Calculator- step 2: Switch from Standard mode to Scientific mode- step 3: Go to settings>Display, change the value and wait ~5 seconds- step 4: Switch from Standard mode to Scientific mode--> Animation should be played in it was not the case in step 2 (or vice-versa)**Expected behavior**The calculator should react to user settings and change the behavior of animations**Screenshots****Device and Application Information** - OS Build: - Architecture: - Application Version: - Region: - Dev Version Installed:**Requested Assignment**If possible, I would like to fix it","open","747","null","[object Object],[object Object],[object Object],[object Object]","null"
"Clicking on the History Label causes the [Shift] + [Ctrl] + [D] hotkeys to break","**Describe the bug**Clicking on the History Label causes the [Shift] + [Ctrl] + [D] hotkeys to break**Steps To Reproduce**1. Launch Windows Calculator2. Ensure the window is sized large enough so that the History panel is viable3. Perform a calculation    - E.g. 4*5/6=    - A history item should populate the history panel3. Click on the 'history" pivot button.4. Try to use [Shift] + [Ctrl] + [D] to clear history.5. See error**Observed behavior**Using the [Shift] + [Ctrl] + [D] hotkeys has no impact; nothing appears to happen when the keys are pressed**Expected behavior**Using the [Shift] + [Ctrl] + [D] hotkeys clears the history panel**Screenshots**![image](https://user-images.githubusercontent.com/1414423/67671693-acd80f80-f933-11e9-8091-79d977c9f7ee.png)**Device and Application Information** - OS Build: 10.0.19505.0 - Architecture: X64 - Application Version: 10.1909.1.0 - Region: en-US - Dev Version Installed: True**Additional context**- This caused my automated test to fail, but it took manual testing to figure out why this hotkey function broke- Once this function breaks, it stays broken until the application closed and relaunched- The history label is naturally clicked when navigating between Memory and History, so this issue could impact users who switch between Memory and History and then want to use the hotkeys to clear the history panel  **Requested Assignment**I'm just reporting this problem.  I don't want to fix it.","open","744","null","[object Object],[object Object],[object Object],[object Object],[object Object]","null"
"Unit tests are failing in CI builds","In our [CI builds](https://dev.azure.com/ms/calculator/_build/results?buildId=42197&view=logs), the following four tests recently started failing for x86 (x64 is fine):- ValidateExpressionRegExMatch- ValidatePasteExpressionErrorStates- ValidateScientificPasteExpressionTest- ValidateStandardPasteExpressionTestThis started happening after #687 was merged. We didn't catch it before the PR merged because we only validate x64 for PR builds.","open","721","null","[object Object],[object Object],[object Object],[object Object]","null"
"remove the useless code related to the management of the focus in CalculationResult","## Fixes #699### Description of the changes:- remove OnLostFocus, OnFocus and OnRightTapped- remove `CalculationResult::s_FocusedState` and `CalculationResult::s_UnfocusedState`- stop forcing the focus when users tap the control### How changes were validated:- manually","open","700","EriWong","[object Object]","null"
